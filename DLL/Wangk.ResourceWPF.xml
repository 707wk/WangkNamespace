<?xml version="1.0"?>
<doc>
<assembly>
<name>
Wangk.ResourceWPF
</name>
</assembly>
<members>
<member name="T:Wangk.ResourceWPF.My.Resources.Resources">
<summary>
  一个强类型的资源类，用于查找本地化的字符串等。
</summary>
</member>
<member name="P:Wangk.ResourceWPF.My.Resources.Resources.ResourceManager">
<summary>
  返回此类使用的缓存的 ResourceManager 实例。
</summary>
</member>
<member name="P:Wangk.ResourceWPF.My.Resources.Resources.Culture">
<summary>
  重写当前线程的 CurrentUICulture 属性，对
  使用此强类型资源类的所有资源查找执行重写。
</summary>
</member>
<member name="P:Wangk.ResourceWPF.My.Resources.Resources.no_16px">
<summary>
  查找 System.Drawing.Bitmap 类型的本地化资源。
</summary>
</member>
<member name="P:Wangk.ResourceWPF.My.Resources.Resources.toastFail_32px">
<summary>
  查找 System.Drawing.Bitmap 类型的本地化资源。
</summary>
</member>
<member name="P:Wangk.ResourceWPF.My.Resources.Resources.toastInfo_32px">
<summary>
  查找 System.Drawing.Bitmap 类型的本地化资源。
</summary>
</member>
<member name="P:Wangk.ResourceWPF.My.Resources.Resources.toastSuccess_32px">
<summary>
  查找 System.Drawing.Bitmap 类型的本地化资源。
</summary>
</member>
<member name="P:Wangk.ResourceWPF.BackgroundWork.Title">
 <summary>
 窗口标题
 </summary>
</member>
<member name="M:Wangk.ResourceWPF.BackgroundWork.Run(System.Action{Wangk.ResourceWPF.IBackgroundWorkEventArgs},System.Object)">
 <summary>
 开始执行后台事件
 </summary>
 <param name="backgroundWorkAction">后台事件</param>
 <param name="args">传入的参数</param>
</member>
<member name="P:Wangk.ResourceWPF.BackgroundWork.Result">
 <summary>
 操作结果
 </summary>
</member>
<member name="P:Wangk.ResourceWPF.BackgroundWork.Error">
 <summary>
 发生的错误
 </summary>
</member>
<member name="P:Wangk.ResourceWPF.BackgroundWork.IsCancel">
 <summary>
 是否取消
 </summary>
</member>
<member name="T:Wangk.ResourceWPF.BackgroundWorkLayer">
<summary>
BackgroundWorkLayer
</summary>
</member>
<member name="F:Wangk.ResourceWPF.BackgroundWorkLayer.BackgroundWorkAction">
 <summary>
 后台触发事件
 </summary>
</member>
<member name="P:Wangk.ResourceWPF.BackgroundWorkLayer.Error">
 <summary>
 发生的错误
 </summary>
</member>
<member name="M:Wangk.ResourceWPF.BackgroundWorkLayer.Run(System.Action{Wangk.ResourceWPF.IBackgroundWorkEventArgs},System.Object)">
 <summary>
 开始执行后台事件
 </summary>
 <param name="backgroundWorkAction">后台事件</param>
 <param name="args">传入的参数</param>
</member>
<member name="M:Wangk.ResourceWPF.BackgroundWorkLayer.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:Wangk.ResourceWPF.BackgroundWorkLayerLite">
<summary>
BackgroundWorkLayerLite
</summary>
</member>
<member name="F:Wangk.ResourceWPF.BackgroundWorkLayerLite.BackgroundWorkAction">
 <summary>
 后台触发事件
 </summary>
</member>
<member name="P:Wangk.ResourceWPF.BackgroundWorkLayerLite.Error">
 <summary>
 发生的错误
 </summary>
</member>
<member name="M:Wangk.ResourceWPF.BackgroundWorkLayerLite.Run(System.Action{Wangk.ResourceWPF.IBackgroundWorkEventArgs},System.Object)">
 <summary>
 开始执行后台事件
 </summary>
 <param name="backgroundWorkAction">后台事件</param>
 <param name="args">传入的参数</param>
</member>
<member name="M:Wangk.ResourceWPF.BackgroundWorkLayerLite.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:Wangk.ResourceWPF.BackgroundWorkWindow">
<summary>
BackgroundWorkWindow
</summary>
</member>
<member name="F:Wangk.ResourceWPF.BackgroundWorkWindow.BackgroundWorkAction">
 <summary>
 后台触发事件
 </summary>
</member>
<member name="P:Wangk.ResourceWPF.BackgroundWorkWindow.Args">
 <summary>
 传递的参数
 </summary>
</member>
<member name="P:Wangk.ResourceWPF.BackgroundWorkWindow.IsCancel">
 <summary>
 是否取消
 </summary>
</member>
<member name="P:Wangk.ResourceWPF.BackgroundWorkWindow.Result">
 <summary>
 操作结果
 </summary>
</member>
<member name="P:Wangk.ResourceWPF.BackgroundWorkWindow.Error">
 <summary>
 发生的错误
 </summary>
</member>
<member name="M:Wangk.ResourceWPF.BackgroundWorkWindow.Run(System.Action{Wangk.ResourceWPF.IBackgroundWorkEventArgs})">
 <summary>
 开始执行后台事件
 </summary>
 <param name="backgroundWorkAction">后台事件</param>
</member>
<member name="M:Wangk.ResourceWPF.BackgroundWorkWindow.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="P:Wangk.ResourceWPF.IBackgroundWorkEventArgs.Args">
 <summary>
 传递的参数
 </summary>
</member>
<member name="P:Wangk.ResourceWPF.IBackgroundWorkEventArgs.Result">
 <summary>
 操作结果
 </summary>
</member>
<member name="P:Wangk.ResourceWPF.IBackgroundWorkEventArgs.IsCancel">
 <summary>
 是否取消
 </summary>
</member>
<member name="M:Wangk.ResourceWPF.IBackgroundWorkEventArgs.Write(System.String)">
 <summary>
 输出提示
 </summary>
 <param name="msg">输出信息</param>
</member>
<member name="M:Wangk.ResourceWPF.IBackgroundWorkEventArgs.Write(System.String,System.Int32)">
 <summary>
 输出提示
 </summary>
 <param name="msg">输出信息</param>
 <param name="percentProgress">当前进度 0-100</param>
</member>
<member name="M:Wangk.ResourceWPF.IBackgroundWorkEventArgs.Write(System.Int32)">
 <summary>
 输出提示
 </summary>
 <param name="percentProgress">当前进度 0-100</param>
</member>
<member name="P:Wangk.ResourceWPF.IBackgroundWorkEventArgs.Msg">
 <summary>
 输出的信息
 </summary>
</member>
<member name="T:Wangk.ResourceWPF.UcSpinnerDotCircle">
<summary>
UcSpinnerDotCircle
</summary>
</member>
<member name="M:Wangk.ResourceWPF.UcSpinnerDotCircle.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:Wangk.ResourceWPF.UcSpinnerDotCircle2">
<summary>
UcSpinnerDotCircle2
</summary>
</member>
<member name="M:Wangk.ResourceWPF.UcSpinnerDotCircle2.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:Wangk.ResourceWPF.FileHelper">
 <summary>
 文件操作辅助模块
 </summary>
</member>
<member name="M:Wangk.ResourceWPF.FileHelper.Open(System.String)">
 <summary>
 调用系统方式打开文件
 </summary>
</member>
<member name="T:Wangk.ResourceWPF.FolderNameEditor">
 <summary>FolderBrowser 的设计器基类</summary>
</member>
<member name="T:Wangk.ResourceWPF.FolderBrowserDialog">
 <summary>Vista 样式的选择文件对话框的基类</summary>
</member>
<member name="M:Wangk.ResourceWPF.FolderBrowserDialog.#ctor">
 <summary>初始化 FolderBrowser 的新实例</summary>
</member>
<member name="M:Wangk.ResourceWPF.FolderBrowserDialog.#ctor(System.Windows.Forms.Form)">
 <summary>初始化 FolderBrowser 的新实例</summary>
 <param name="frm">依附的主窗体</param>
</member>
<member name="P:Wangk.ResourceWPF.FolderBrowserDialog.MainForm">
 <summary>依附的主窗体</summary>
</member>
<member name="P:Wangk.ResourceWPF.FolderBrowserDialog.DirectoryPath">
 <summary>获取在 FolderBrowser 中选择的文件夹路径</summary>
</member>
<member name="M:Wangk.ResourceWPF.FolderBrowserDialog.ShowDialog">
 <summary>向用户显示 FolderBrowser 的对话框</summary>
</member>
<member name="M:Wangk.ResourceWPF.FolderBrowserDialog.ShowDialog(System.Windows.Forms.IWin32Window)">
 <summary>向用户显示 FolderBrowser 的对话框</summary>
 <param name="owner">任何实现 System.Windows.Forms.IWin32Window（表示将拥有模式对话框的顶级窗口）的对象。</param>
</member>
<member name="T:Wangk.ResourceWPF.InputBox">
<summary>
InputBox
</summary>
</member>
<member name="M:Wangk.ResourceWPF.InputBox.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:Wangk.ResourceWPF.SystemSleepManagement">
 <summary>
 系统睡眠管理
 </summary>
</member>
<member name="M:Wangk.ResourceWPF.SystemSleepManagement.PreventSleep(System.Boolean)">
 <summary>
 阻止系统睡眠，直到线程结束恢复睡眠策略
 </summary>
 <param name="includeDisplay">是否阻止关闭显示器</param>
</member>
<member name="M:Wangk.ResourceWPF.SystemSleepManagement.RestoreSleep">
 <summary>
 恢复系统睡眠策略
 </summary>
</member>
<member name="M:Wangk.ResourceWPF.SystemSleepManagement.ResetSleepTimer(System.Boolean)">
 <summary>
 重置系统睡眠计时器
 </summary>
 <param name="includeDisplay">是否阻止关闭显示器</param>
</member>
<member name="T:Wangk.ResourceWPF.ToastWindow">
<summary>
ToastWindow
</summary>
</member>
<member name="M:Wangk.ResourceWPF.ToastWindow.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="M:Wangk.ResourceWPF.WindowHelper.GetActiveWindow">
 <summary>
 获取程序当前活动的窗口句柄
 </summary>
</member>
<member name="M:Wangk.ResourceWPF.WindowHelper.GetForegroundWindow">
 <summary>
 获取系统当前活动的窗口句柄
 </summary>
</member>
<member name="M:Wangk.ResourceWPF.WindowHelper.GetWindowThreadProcessId(System.IntPtr,System.IntPtr@)">
 <summary>
 获取窗口所在进程
 </summary>
 <param name="hWnd"></param>
 <param name="lpdwProcessId">进程标识</param>
 <returns>线程标识</returns>
</member>
<member name="M:Wangk.ResourceWPF.WindowHelper.InitChildWindowStyle(System.Windows.Window)">
 <summary>
 初始化子窗口样式
 </summary>
</member>
<member name="M:Wangk.ResourceWPF.WindowHelper.IsWindowMini(System.IntPtr)">
 <summary>
 窗口是否最小化
 </summary>
</member>
<member name="M:Wangk.ResourceWPF.WindowHelper.SetOwner(System.Windows.Window,System.IntPtr)">
 <summary>
 设置WPF窗口的所有者
 </summary>
</member>
<member name="T:Wangk.ResourceWPF.WPFVisualTreeHelper">
 <summary>
 VisualTreeHelper辅助模块
 </summary>
</member>
<member name="M:Wangk.ResourceWPF.WPFVisualTreeHelper.GetChildren``1(System.Windows.DependencyObject)">
 <summary>
 查找子节点
 </summary>
 <typeparam name="ChildT">子节点类型</typeparam>
 <param name="parent">父对象</param>
 <returns>子节点列表</returns>
</member>
<member name="M:Wangk.ResourceWPF.WPFVisualTreeHelper.GetChild``1(System.Windows.DependencyObject)">
 <summary>
 查找子节点
 </summary>
 <typeparam name="ChildT">子节点类型</typeparam>
 <param name="parent">父对象</param>
 <returns>子节点</returns>
</member>
</members>
</doc>
