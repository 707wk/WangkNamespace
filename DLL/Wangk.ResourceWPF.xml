<?xml version="1.0"?>
<doc>
<assembly>
<name>
Wangk.ResourceWPF
</name>
</assembly>
<members>
<member name="T:Wangk.ResourceWPF.My.Resources.Resources">
<summary>
  一个强类型的资源类，用于查找本地化的字符串等。
</summary>
</member>
<member name="P:Wangk.ResourceWPF.My.Resources.Resources.ResourceManager">
<summary>
  返回此类使用的缓存的 ResourceManager 实例。
</summary>
</member>
<member name="P:Wangk.ResourceWPF.My.Resources.Resources.Culture">
<summary>
  重写当前线程的 CurrentUICulture 属性，对
  使用此强类型资源类的所有资源查找执行重写。
</summary>
</member>
<member name="P:Wangk.ResourceWPF.My.Resources.Resources.toastFail_32px">
<summary>
  查找 System.Drawing.Bitmap 类型的本地化资源。
</summary>
</member>
<member name="P:Wangk.ResourceWPF.My.Resources.Resources.toastInfo_32px">
<summary>
  查找 System.Drawing.Bitmap 类型的本地化资源。
</summary>
</member>
<member name="P:Wangk.ResourceWPF.My.Resources.Resources.toastSuccess_32px">
<summary>
  查找 System.Drawing.Bitmap 类型的本地化资源。
</summary>
</member>
<member name="P:Wangk.ResourceWPF.BackgroundWork.Title">
 <summary>
 窗口标题
 </summary>
</member>
<member name="M:Wangk.ResourceWPF.BackgroundWork.Run(System.Action{Wangk.ResourceWPF.IBackgroundWorkEventArgs},System.Object)">
 <summary>
 开始执行后台事件
 </summary>
 <param name="backgroundWorkAction">后台事件</param>
 <param name="args">传入的参数</param>
</member>
<member name="P:Wangk.ResourceWPF.BackgroundWork.Result">
 <summary>
 操作结果
 </summary>
</member>
<member name="P:Wangk.ResourceWPF.BackgroundWork.Error">
 <summary>
 发生的错误
 </summary>
</member>
<member name="P:Wangk.ResourceWPF.BackgroundWork.IsCancel">
 <summary>
 是否取消
 </summary>
</member>
<member name="T:Wangk.ResourceWPF.BackgroundWorkWindow">
<summary>
BackgroundWorkWindow
</summary>
</member>
<member name="F:Wangk.ResourceWPF.BackgroundWorkWindow.BackgroundWorkAction">
 <summary>
 后台触发事件
 </summary>
</member>
<member name="P:Wangk.ResourceWPF.BackgroundWorkWindow.Args">
 <summary>
 传递的参数
 </summary>
</member>
<member name="P:Wangk.ResourceWPF.BackgroundWorkWindow.IsCancel">
 <summary>
 是否取消
 </summary>
</member>
<member name="P:Wangk.ResourceWPF.BackgroundWorkWindow.Result">
 <summary>
 操作结果
 </summary>
</member>
<member name="P:Wangk.ResourceWPF.BackgroundWorkWindow.Error">
 <summary>
 发生的错误
 </summary>
</member>
<member name="M:Wangk.ResourceWPF.BackgroundWorkWindow.Run(System.Action{Wangk.ResourceWPF.IBackgroundWorkEventArgs})">
 <summary>
 开始执行后台事件
 </summary>
 <param name="backgroundWorkAction">后台事件</param>
</member>
<member name="M:Wangk.ResourceWPF.BackgroundWorkWindow.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="P:Wangk.ResourceWPF.IBackgroundWorkEventArgs.Args">
 <summary>
 传递的参数
 </summary>
</member>
<member name="P:Wangk.ResourceWPF.IBackgroundWorkEventArgs.Result">
 <summary>
 操作结果
 </summary>
</member>
<member name="P:Wangk.ResourceWPF.IBackgroundWorkEventArgs.IsCancel">
 <summary>
 是否取消
 </summary>
</member>
<member name="M:Wangk.ResourceWPF.IBackgroundWorkEventArgs.Write(System.String)">
 <summary>
 输出提示
 </summary>
 <param name="msg">输出信息</param>
</member>
<member name="M:Wangk.ResourceWPF.IBackgroundWorkEventArgs.Write(System.String,System.Int32)">
 <summary>
 输出提示
 </summary>
 <param name="msg">输出信息</param>
 <param name="percentProgress">当前进度 0-100</param>
</member>
<member name="M:Wangk.ResourceWPF.IBackgroundWorkEventArgs.Write(System.Int32)">
 <summary>
 输出提示
 </summary>
 <param name="percentProgress">当前进度 0-100</param>
</member>
<member name="T:Wangk.ResourceWPF.ucSpinnerDotCircle">
<summary>
ucSpinnerDotCircle
</summary>
</member>
<member name="M:Wangk.ResourceWPF.ucSpinnerDotCircle.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:Wangk.ResourceWPF.ConsoleDebug">
 <summary>
 终端调试
 </summary>
</member>
<member name="M:Wangk.ResourceWPF.ConsoleDebug.FreeConsole">
 <summary>
 释放控制台窗口
 </summary>
</member>
<member name="M:Wangk.ResourceWPF.ConsoleDebug.Open">
 <summary>
 打开终端
 </summary>
</member>
<member name="M:Wangk.ResourceWPF.ConsoleDebug.Close">
 <summary>
 关闭终端
 </summary>
</member>
<member name="T:Wangk.ResourceWPF.ToastWindow">
<summary>
ToastWindow
</summary>
</member>
<member name="M:Wangk.ResourceWPF.ToastWindow.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:Wangk.ResourceWPF.XamlGeneratedNamespace.GeneratedInternalTypeHelper">
<summary>
GeneratedInternalTypeHelper
</summary>
</member>
<member name="M:Wangk.ResourceWPF.XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
<summary>
CreateInstance
</summary>
</member>
<member name="M:Wangk.ResourceWPF.XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
<summary>
GetPropertyValue
</summary>
</member>
<member name="M:Wangk.ResourceWPF.XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
<summary>
SetPropertyValue
</summary>
</member>
<member name="M:Wangk.ResourceWPF.XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
<summary>
CreateDelegate
</summary>
</member>
<member name="M:Wangk.ResourceWPF.XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
<summary>
AddEventHandler
</summary>
</member>
</members>
</doc>
